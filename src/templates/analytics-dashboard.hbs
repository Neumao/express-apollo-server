<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Apollo GraphQL Analytics Dashboard</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;
      background: #f8fafc;
      color: #1e293b;
      min-height: 100vh;
      overflow-x: hidden;
      line-height: 1.6;
    }

    /* Header */
    .header {
      background: #ffffff;
      padding: 1.5rem 2rem;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      border-bottom: 1px solid #e2e8f0;
    }

    .header h1 {
      font-size: 28px;
      font-weight: 700;
      color: #1e293b;
      margin-bottom: 0.5rem;
    }

    .header-info {
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-size: 14px;
      color: #64748b;
    }

    .refresh-btn {
      background: #3b82f6;
      color: white;
      border: none;
      padding: 0.5rem 1rem;
      border-radius: 6px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
      font-size: 14px;
    }

    .refresh-btn:hover {
      background: #2563eb;
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
    }

    /* Main Layout */
    .main-container {
      display: flex;
      height: calc(100vh - 100px);
      gap: 1.5rem;
      padding: 1.5rem;
      background: #f8fafc;
    }

    .analytics-section {
      flex: 0 0 70%;
      overflow-y: auto;
      padding-right: 1rem;
    }

    .logs-section {
      flex: 0 0 30%;
      background: #ffffff;
      border-radius: 8px;
      border: 1px solid #e2e8f0;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      overflow: hidden;
    }

    /* Metrics Cards */
    .metrics-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1rem;
      margin-bottom: 1.5rem;
    }

    .metric-card {
      background: #ffffff;
      padding: 1.5rem;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      border: 1px solid #e2e8f0;
      transition: all 0.2s ease;
    }

    .metric-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      border-color: #3b82f6;
    }

    .metric-value {
      font-size: 28px;
      font-weight: 700;
      color: #1e293b;
      margin-bottom: 0.5rem;
    }

    .metric-label {
      font-size: 14px;
      color: #64748b;
      font-weight: 500;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .metric-details {
      font-size: 12px;
      color: #94a3b8;
      margin-top: 0.25rem;
      font-weight: 400;
    }

    .metric-success .metric-value { color: #059669; }
    .metric-warning .metric-value { color: #d97706; }
    .metric-error .metric-value { color: #dc2626; }
    .metric-info .metric-value { color: #3b82f6; }

    /* Charts Section */
    .charts-container {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 1rem;
      margin-bottom: 1.5rem;
    }

    .chart-card {
      background: #ffffff;
      border-radius: 8px;
      padding: 1.5rem;
      border: 1px solid #e2e8f0;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .chart-title {
      font-size: 16px;
      font-weight: 600;
      color: #1e293b;
      margin-bottom: 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid #e2e8f0;
    }

    .chart-placeholder {
      height: 300px;
      background: #f8fafc;
      border-radius: 6px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: #64748b;
      font-size: 14px;
      font-weight: 500;
      border: 1px dashed #cbd5e1;
    }

    /* Data Table */
    .data-table-container {
      background: #ffffff;
      border-radius: 8px;
      border: 1px solid #e2e8f0;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      margin-bottom: 1.5rem;
      overflow: hidden;
    }

    .table-header {
      background: #f8fafc;
      padding: 1rem 1.5rem;
      border-bottom: 1px solid #e2e8f0;
    }

    .table-title {
      font-size: 16px;
      font-weight: 600;
      color: #1e293b;
    }

    table {
      width: 100%;
      border-collapse: collapse;
    }

    th {
      background: #f8fafc;
      color: #374151;
      padding: 0.75rem 1rem;
      font-weight: 600;
      font-size: 12px;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      border-bottom: 1px solid #e2e8f0;
      text-align: left;
    }

    td {
      padding: 0.75rem 1rem;
      border-bottom: 1px solid #f1f5f9;
      color: #374151;
      font-size: 14px;
    }

    tr:hover {
      background: #f8fafc;
    }

    .status-badge {
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 11px;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .status-success { background: #dcfce7; color: #166534; }
    .status-warning { background: #fef3c7; color: #92400e; }
    .status-error { background: #fee2e2; color: #991b1b; }

    /* Logs Section */
    .logs-header {
      background: #f8fafc;
      padding: 1rem 1.5rem;
      border-bottom: 1px solid #e2e8f0;
    }

    .logs-title {
      font-size: 16px;
      font-weight: 600;
      color: #1e293b;
      margin-bottom: 1rem;
    }

    .log-controls {
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
    }

    .log-controls select, .log-controls button {
      background: #ffffff;
      color: #374151;
      border: 1px solid #d1d5db;
      border-radius: 4px;
      padding: 0.5rem;
      font-size: 12px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .log-controls button {
      background: #3b82f6;
      color: #ffffff;
      border-color: #3b82f6;
    }

    .log-controls button:hover {
      background: #2563eb;
      border-color: #2563eb;
    }

    .log-controls select:focus, .log-controls button:focus {
      outline: none;
      border-color: #3b82f6;
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .log-viewer {
      height: calc(100vh - 300px);
      overflow-y: auto;
      padding: 1rem;
      font-family: 'SF Mono', 'Monaco', 'Cascadia Code', 'Roboto Mono', Consolas, monospace;
      background: #ffffff;
      font-size: 13px;
    }

    .log-entry {
      display: flex;
      gap: 1rem;
      padding: 0.5rem 0;
      border-bottom: 1px solid #f1f5f9;
      line-height: 1.4;
    }

    .log-timestamp {
      color: #64748b;
      font-weight: 500;
      min-width: 80px;
    }

    .log-level {
      font-weight: 600;
      min-width: 60px;
    }

    .log-level-info { color: #3b82f6; }
    .log-level-warn { color: #d97706; }
    .log-level-error { color: #dc2626; }
    .log-level-debug { color: #7c3aed; }
    .log-level-http { color: #059669; }

    .log-message {
      color: #374151;
      flex: 1;
    }

    /* Footer */
    .footer {
      background: #ffffff;
      padding: 1rem 2rem;
      text-align: center;
      color: #64748b;
      border-top: 1px solid #e2e8f0;
      font-size: 12px;
    }

    /* Scrollbar Styling */
    ::-webkit-scrollbar {
      width: 6px;
    }

    ::-webkit-scrollbar-track {
      background: #f1f5f9;
    }

    ::-webkit-scrollbar-thumb {
      background: #cbd5e1;
      border-radius: 3px;
    }

    ::-webkit-scrollbar-thumb:hover {
      background: #94a3b8;
    }

    /* Loading Animation */
    .loading {
      display: inline-block;
      width: 20px;
      height: 20px;
      border: 3px solid #334155;
      border-radius: 50%;
      border-top-color: #3B82F6;
      animation: spin 1s ease-in-out infinite;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
  <!-- Header -->
  <div class="header">
    <h1>� Analytics Dashboard</h1>
    <div class="header-info">
      <span>📅 {{currentDate}} - {{currentTime}}</span>
      <button class="refresh-btn" onclick="location.reload()">🔄 Refresh</button>
    </div>
  </div>

  <!-- Main Container -->
  <div class="main-container">
    <!-- Analytics Section (70%) -->
    <div class="analytics-section">
      <!-- Enhanced Metrics Cards -->
      <div class="metrics-grid">
        <div class="metric-card metric-info" title="Total users registered in the system">
          <div class="metric-value">{{metrics.totalUsers}}</div>
          <div class="metric-label">Total Users</div>
        </div>
        <div class="metric-card metric-success" title="Users active in the last 24 hours">
          <div class="metric-value">{{metrics.activeUsers}}</div>
          <div class="metric-label">Active Users</div>
        </div>
        <div class="metric-card metric-warning" title="Users with verified email addresses">
          <div class="metric-value">{{metrics.verifiedUsers}}</div>
          <div class="metric-label">Verified Users</div>
        </div>
        <div class="metric-card metric-error" title="Users with unverified email addresses">
          <div class="metric-value">{{metrics.unverifiedUsers}}</div>
          <div class="metric-label">Unverified Users</div>
        </div>
        <div class="metric-card metric-info" title="Total API queries processed" data-metric="totalRequests">
          <div class="metric-value">{{metrics.totalQueries}}</div>
          <div class="metric-label">Total Queries</div>
        </div>
        <div class="metric-card metric-success" title="Average response time in milliseconds" data-metric="avgResponseTime">
          <div class="metric-value">{{metrics.avgResponseTime}}ms</div>
          <div class="metric-label">Avg Response</div>
        </div>
        <div class="metric-card metric-error" title="API error rate percentage" data-metric="errorRate">
          <div class="metric-value">{{metrics.errorRate}}%</div>
          <div class="metric-label">Error Rate</div>
        </div>
        <div class="metric-card metric-success" title="API success rate percentage" data-metric="successRate">
          <div class="metric-value">{{metrics.successRate}}%</div>
          <div class="metric-label">Success Rate</div>
        </div>
      </div>

      <!-- System Performance Cards -->
      <div class="metrics-grid" style="margin-bottom: 1.5rem;">
        <div class="metric-card metric-info" title="Current memory usage: {{metrics.memoryUsageMB}} MB / {{metrics.memoryTotalMB}} MB">
          <div class="metric-value" id="memory-usage">{{metrics.memoryUsage}}%</div>
          <div class="metric-label">Memory Usage</div>
          <div class="metric-details">{{metrics.memoryUsageMB}} MB used</div>
        </div>
        <div class="metric-card metric-warning" title="Current CPU usage across {{metrics.cpuCores}} cores">
          <div class="metric-value" id="cpu-usage">{{metrics.cpuUsage}}%</div>
          <div class="metric-label">CPU Usage</div>
          <div class="metric-details">{{metrics.cpuCores}} cores</div>
        </div>
        <div class="metric-card metric-success" title="Node.js process memory: {{metrics.processMemoryMB}} MB">
          <div class="metric-value" id="process-memory">{{metrics.processMemoryMB}} MB</div>
          <div class="metric-label">Process Memory</div>
          <div class="metric-details">Node.js Heap</div>
        </div>
        <div class="metric-card metric-success" title="Server uptime: {{metrics.processUptimeMinutes}} minutes">
          <div class="metric-value" id="uptime">{{metrics.processUptimeMinutes}}m</div>
          <div class="metric-label">Process Uptime</div>
          <div class="metric-details">{{metrics.systemUptimeHours}}h system</div>
        </div>
      </div>

      <!-- Enhanced Charts Container -->
      <div class="charts-container" style="grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 1.5rem;">
        <div class="chart-card">
          <div class="chart-title">📈 User Growth (Last 7 Days)</div>
          <div class="chart-placeholder">
            <canvas id="user-growth-chart" width="100%" height="280"></canvas>
          </div>
        </div>
        <div class="chart-card">
          <div class="chart-title">🔄 API Requests (Last 24 Hours)</div>
          <div class="chart-placeholder">
            <canvas id="api-requests-chart" width="100%" height="280"></canvas>
          </div>
        </div>
      </div>
      
      <div class="charts-container">
        <div class="chart-card">
          <div class="chart-title">⚡ Response Time Trends</div>
          <div class="chart-placeholder">
            <canvas id="response-time-chart" width="100%" height="280"></canvas>
          </div>
        </div>
        <div class="chart-card">
          <div class="chart-title">👥 User Activity Breakdown</div>
          <div class="chart-placeholder">
            <canvas id="user-activity-chart" width="100%" height="280"></canvas>
          </div>
        </div>
      </div>

      <!-- Data Table -->
      <div class="data-table-container">
        <div class="table-header">
          <div class="table-title">📋 Recent Query Sessions</div>
        </div>
        <table>
          <thead>
            <tr>
              <th>Timestamp</th>
              <th>Query Type</th>
              <th>User</th>
              <th>Response Time</th>
              <th>Status</th>
            </tr>
          </thead>
          <tbody id="query-sessions">
            {{#each recentSessions}}
            <tr>
              <td>{{this.timestamp}}</td>
              <td><code>{{this.queryType}}</code></td>
              <td>{{this.user}}</td>
              <td>{{this.responseTime}}</td>
              <td>
                <span class="status-badge status-{{this.statusClass}}">{{this.status}}</span>
              </td>
            </tr>
            {{/each}}
          </tbody>
        </table>
      </div>
    </div>

    <!-- Logs Section (30%) -->
    <div class="logs-section">
      <div class="logs-header">
        <div class="logs-title">📝 Application Logs</div>
        <div class="log-controls">
          <select id="log-type">
            <option value="">All Types</option>
            <option value="application">Application</option>
            <option value="error">Error</option>
            <option value="exceptions">Exceptions</option>
            <option value="rejections">Rejections</option>
          </select>
          <select id="log-level">
            <option value="">All Levels</option>
            <option value="INFO">Info</option>
            <option value="WARN">Warning</option>
            <option value="ERROR">Error</option>
            <option value="DEBUG">Debug</option>
            <option value="HTTP">HTTP</option>
          </select>
          <button id="refresh-logs">🔄 Refresh</button>
          <button id="clear-logs">🗑️ Clear</button>
        </div>
      </div>
      <div class="log-viewer" id="logs">
        {{#each recentLogs}}
        <div class="log-entry">
          <span class="log-timestamp">{{this.timestamp}}</span>
          <span class="log-level log-level-{{this.levelLower}}">[{{this.level}}]</span>
          <span class="log-message">{{this.message}}</span>
        </div>
        {{/each}}
      </div>
    </div>
  </div>

  <!-- Footer -->
  <div class="footer">
    <span>Last Updated: {{currentTime}} | Server: Apollo GraphQL v5 | Status: 🟢 Operational</span>
  </div>

  <!-- Chart.js for data visualization -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.min.js"></script>
  <script>
    // Enhanced Analytics Dashboard JavaScript
    let userGrowthChart = null;
    let apiRequestsChart = null;
    let responseTimeChart = null;
    let userActivityChart = null;

    // Initialize dashboard
    document.addEventListener('DOMContentLoaded', function() {
      initializeCharts();
      initializeLogControls();
      startPeriodicUpdates();
    });

    // Initialize Chart.js charts
    function initializeCharts() {
      // Check if Chart.js is available
      if (typeof Chart === 'undefined') {
        console.warn('Chart.js not available');
        return;
      }
      
      // Log available data
      console.log('Initializing charts with data:', {
        metrics: {{{json metrics}}},
        chartData: {{{json chartData}}}
      });

      // User Growth Chart
      const userGrowthCtx = document.getElementById('user-growth-chart');
      if (userGrowthCtx) {
        const labels = {{{chartData.userGrowth.labels}}};
        const data = {{{chartData.userGrowth.data}}};
        console.log('User Growth Chart Data:', { labels, data });
        
        userGrowthChart = window.userGrowthChart = new Chart(userGrowthCtx, {
          type: 'line',
          data: {
            labels: typeof labels === 'string' ? JSON.parse(labels) : labels,
            datasets: [{
              label: 'New Users',
              data: {{{chartData.userGrowth.data}}},
              borderColor: '#3b82f6',
              backgroundColor: 'rgba(59, 130, 246, 0.1)',
              tension: 0.4,
              fill: true,
              pointBackgroundColor: '#3b82f6',
              pointBorderColor: '#ffffff',
              pointBorderWidth: 2
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: { 
              legend: { display: false },
              tooltip: {
                backgroundColor: '#1e293b',
                titleColor: '#ffffff',
                bodyColor: '#ffffff'
              }
            },
            scales: {
              y: { 
                beginAtZero: true,
                grid: { color: '#f1f5f9' },
                ticks: { color: '#64748b' }
              },
              x: { 
                grid: { color: '#f1f5f9' },
                ticks: { color: '#64748b' }
              }
            }
          }
        });
      }

      // API Requests Chart
      const apiRequestsCtx = document.getElementById('api-requests-chart');
      if (apiRequestsCtx) {
        apiRequestsChart = window.apiRequestsChart = new Chart(apiRequestsCtx, {
          type: 'bar',
          data: {
            labels: {{{chartData.apiRequests.labels}}},
            datasets: [{
              label: 'Requests',
              data: {{{chartData.apiRequests.data}}},
              backgroundColor: 'rgba(34, 197, 94, 0.8)',
              borderColor: '#22c55e',
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: { legend: { display: false } },
            scales: {
              y: { 
                beginAtZero: true,
                grid: { color: '#f1f5f9' },
                ticks: { color: '#64748b' }
              },
              x: { 
                grid: { display: false },
                ticks: { color: '#64748b' }
              }
            }
          }
        });
      }

      // Response Time Chart
      const responseTimeCtx = document.getElementById('response-time-chart');
      if (responseTimeCtx) {
        responseTimeChart = window.responseTimeChart = new Chart(responseTimeCtx, {
          type: 'line',
          data: {
            labels: {{{chartData.responseTime.labels}}},
            datasets: [{
              label: 'Response Time (ms)',
              data: {{{chartData.responseTime.data}}},
              borderColor: '#f59e0b',
              backgroundColor: 'rgba(245, 158, 11, 0.1)',
              tension: 0.4,
              fill: true
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: { legend: { display: false } },
            scales: {
              y: { 
                beginAtZero: true,
                grid: { color: '#f1f5f9' },
                ticks: { color: '#64748b' }
              },
              x: { 
                grid: { color: '#f1f5f9' },
                ticks: { color: '#64748b' }
              }
            }
          }
        });
      }

      // User Activity Chart
      const userActivityCtx = document.getElementById('user-activity-chart');
      if (userActivityCtx) {
        userActivityChart = window.userActivityChart = new Chart(userActivityCtx, {
          type: 'doughnut',
          data: {
            labels: {{{chartData.userActivity.labels}}},
            datasets: [{
              data: {{{chartData.userActivity.data}}},
              backgroundColor: ['#3b82f6', '#ef4444', '#f59e0b', '#22c55e'],
              borderWidth: 0
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                position: 'bottom',
                labels: { 
                  color: '#374151',
                  padding: 15,
                  usePointStyle: true
                }
              }
            }
          }
        });
      }
    }

    // Initialize log controls
    function initializeLogControls() {
      const logType = document.getElementById('log-type');
      const logLevel = document.getElementById('log-level');
      const refreshBtn = document.getElementById('refresh-logs');
      const clearBtn = document.getElementById('clear-logs');

      if (logType) logType.addEventListener('change', fetchLogs);
      if (logLevel) logLevel.addEventListener('change', fetchLogs);
      if (refreshBtn) refreshBtn.addEventListener('click', fetchLogs);
      if (clearBtn) clearBtn.addEventListener('click', clearLogs);
    }

    // Fetch and update logs
    async function fetchLogs() {
      try {
        const logType = document.getElementById('log-type')?.value || '';
        const logLevel = document.getElementById('log-level')?.value || '';
        
        const params = new URLSearchParams();
        params.append('limit', '50');
        if (logType) params.append('logType', logType);
        if (logLevel) params.append('level', logLevel);
        
        const response = await fetch(`/api/analytics/logs?${params.toString()}`);
        const result = await response.json();
        
        if (result.status && result.data?.logs) {
          updateLogsDisplay(result.data.logs);
        }
      } catch (error) {
        console.error('Failed to fetch logs:', error);
      }
    }

    // Update logs display
    function updateLogsDisplay(logs) {
      const logsContainer = document.getElementById('logs');
      if (!logsContainer) return;

      logsContainer.innerHTML = '';
      
      if (logs.length === 0) {
        logsContainer.innerHTML = '<div class="log-entry"><span class="log-message" style="color: #64748B;">No logs found</span></div>';
        return;
      }

      logs.forEach(log => {
        const logEntry = document.createElement('div');
        logEntry.className = 'log-entry';
        
        const timestamp = new Date(log.timestamp).toLocaleTimeString();
        logEntry.innerHTML = `
          <span class="log-timestamp">${timestamp}</span>
          <span class="log-level log-level-${log.level.toLowerCase()}">[${log.level}]</span>
          <span class="log-message">${log.message}</span>
        `;
        
        logsContainer.appendChild(logEntry);
      });
    }

    // Clear logs display
    function clearLogs() {
      const logsContainer = document.getElementById('logs');
      if (logsContainer) {
        logsContainer.innerHTML = '<div class="log-entry"><span class="log-message" style="color: #64748B;">Logs cleared</span></div>';
      }
    }

    // Real-time chart updates
    async function updateCharts() {
      try {
        const response = await fetch('/api/analytics/data');
        const data = await response.json();
        
        if (data.success && data.data.chartData) {
          const chartData = data.data.chartData;
          
          // Update User Growth Chart
          if (window.userGrowthChart && chartData.userGrowth) {
            window.userGrowthChart.data.labels = chartData.userGrowth.labels;
            window.userGrowthChart.data.datasets[0].data = chartData.userGrowth.data;
            window.userGrowthChart.update('none'); // No animation for smoother updates
          }
          
          // Update API Requests Chart
          if (window.apiRequestsChart && chartData.apiRequests) {
            window.apiRequestsChart.data.labels = chartData.apiRequests.labels;
            window.apiRequestsChart.data.datasets[0].data = chartData.apiRequests.data;
            window.apiRequestsChart.update('none');
          }
          
          // Update Response Time Chart
          if (window.responseTimeChart && chartData.responseTime) {
            window.responseTimeChart.data.labels = chartData.responseTime.labels;
            window.responseTimeChart.data.datasets[0].data = chartData.responseTime.data;
            window.responseTimeChart.update('none');
          }
          
          // Update User Activity Chart
          if (window.userActivityChart && chartData.userActivity) {
            window.userActivityChart.data.labels = chartData.userActivity.labels;
            window.userActivityChart.data.datasets[0].data = chartData.userActivity.data;
            window.userActivityChart.update('none');
          }
          
          console.log('Charts updated successfully');
        }
      } catch (error) {
        console.error('Error updating charts:', error);
      }
    }

    // Real-time metrics update
    async function updateMetrics() {
      try {
        const response = await fetch('/api/analytics/metrics-only');
        const data = await response.json();
        
        if (data.success && data.metrics) {
          // Update memory usage
          const memoryElement = document.getElementById('memory-usage');
          if (memoryElement) {
            memoryElement.textContent = data.metrics.memoryUsage + '%';
            const memoryCard = memoryElement.closest('.metric-card');
            if (memoryCard) {
              memoryCard.setAttribute('title', `Current memory usage: ${data.metrics.memoryUsageMB} MB / ${data.metrics.memoryTotalMB} MB`);
              const detailsElement = memoryCard.querySelector('.metric-details');
              if (detailsElement) {
                detailsElement.textContent = `${data.metrics.memoryUsageMB} MB used`;
              }
            }
          }
          
          // Update CPU usage
          const cpuElement = document.getElementById('cpu-usage');
          if (cpuElement) {
            cpuElement.textContent = data.metrics.cpuUsage + '%';
            const cpuCard = cpuElement.closest('.metric-card');
            if (cpuCard) {
              cpuCard.setAttribute('title', `Current CPU usage across ${data.metrics.cpuCores} cores`);
            }
          }
          
          // Update process memory
          const processMemoryElement = document.getElementById('process-memory');
          if (processMemoryElement) {
            processMemoryElement.textContent = data.metrics.processMemoryMB + ' MB';
          }
          
          // Update uptime
          const uptimeElement = document.getElementById('uptime');
          if (uptimeElement) {
            uptimeElement.textContent = data.metrics.processUptimeMinutes + 'm';
            const uptimeCard = uptimeElement.closest('.metric-card');
            if (uptimeCard) {
              uptimeCard.setAttribute('title', `Server uptime: ${data.metrics.processUptimeMinutes} minutes`);
              const detailsElement = uptimeCard.querySelector('.metric-details');
              if (detailsElement) {
                detailsElement.textContent = `${data.metrics.systemUptimeHours}h system`;
              }
            }
          }
          
          // Update API metrics if available
          if (data.metrics.totalRequests !== undefined) {
            const totalRequestsElement = document.querySelector('[data-metric="totalRequests"] .metric-value');
            if (totalRequestsElement) {
              totalRequestsElement.textContent = data.metrics.totalRequests;
            }
            
            const avgResponseTimeElement = document.querySelector('[data-metric="avgResponseTime"] .metric-value');
            if (avgResponseTimeElement) {
              avgResponseTimeElement.textContent = data.metrics.avgResponseTime + 'ms';
            }
            
            const errorRateElement = document.querySelector('[data-metric="errorRate"] .metric-value');
            if (errorRateElement) {
              errorRateElement.textContent = data.metrics.errorRate + '%';
            }
            
            const successRateElement = document.querySelector('[data-metric="successRate"] .metric-value');
            if (successRateElement) {
              successRateElement.textContent = data.metrics.successRate + '%';
            }
          }
          
          console.log('Metrics updated successfully');
        }
      } catch (error) {
        console.error('Error updating metrics:', error);
      }
    }

    // Start periodic updates
    function startPeriodicUpdates() {
      // Refresh logs every 30 seconds
      setInterval(fetchLogs, 30000);
      
      // Refresh real-time metrics every 10 seconds
      setInterval(updateMetrics, 10000);
      
      // Refresh charts every 60 seconds
      setInterval(updateCharts, 60000);
      
      console.log('Real-time updates started - metrics: 10s, charts: 60s, logs: 30s');
    }

    // Error handling for Chart.js loading
    window.addEventListener('error', function(e) {
      if (e.filename && e.filename.includes('chart')) {
        console.warn('Chart.js loading failed, charts will be disabled');
      }
    });
  </script>
</body>
</html>